{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport { Form, Button } from 'semantic-ui-react';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { toast } from 'react-toastify';\nimport useAuth from '../../../hooks/useAuth';\nimport { createAdressApi, updateAdressApi } from '../../../api/adress';\nexport default function AdressForm({\n  setShowModal,\n  setReloadAdresess,\n  newAdress,\n  adress\n}) {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    auth,\n    logout\n  } = useAuth();\n  const formik = useFormik({\n    initialValues: initialValues(adress),\n    validationSchema: Yup.object(validationSchema()),\n    onSubmit: async formData => {\n      newAdress ? createAdress(formData) : updateAdress(formData);\n    }\n  });\n\n  const createAdress = async formData => {\n    setLoading(true);\n\n    const formDataTemp = _objectSpread(_objectSpread({}, formData), {}, {\n      user: auth.idUser\n    });\n\n    const response = await createAdressApi(formDataTemp, logout);\n\n    if (!response) {\n      toast.warning(\"Error al crear la direccion\");\n      setLoading(false);\n    } else {\n      formik.resetForm();\n      setLoading(false);\n      setReloadAdresess(true);\n      setShowModal(false);\n    }\n\n    setLoading(false);\n  };\n\n  const updateAdress = async formData => {\n    setLoading(true);\n\n    const formDataTemp = _objectSpread(_objectSpread({}, formData), {}, {\n      user: auth.idUser\n    });\n\n    const response = await updateAdressApi(adress._id, formDataTemp, logout);\n\n    if (!response) {\n      toast.warning(\"Error al actulizar la direccion\");\n      setLoading(false);\n    } else {\n      formik.resetForm();\n      setReloadAdresess(true);\n      setLoading(false);\n      setShowModal(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(Form, {\n    onSubmit: formik.handleSubmit,\n    children: [/*#__PURE__*/_jsx(Form.Input, {\n      name: \"title\",\n      type: \"text\",\n      label: \"Titulo de la direccion\",\n      placeholder: \"Titulo de la direcci\\xF3n\",\n      onChange: formik.handleChange,\n      value: formik.values.title,\n      error: formik.errors.title\n    }), /*#__PURE__*/_jsxs(Form.Group, {\n      widths: \"equal\",\n      children: [/*#__PURE__*/_jsx(Form.Input, {\n        name: \"name\",\n        type: \"text\",\n        label: \"Nombre y Apellido\",\n        placeholder: \"Nombre y Apellido\",\n        onChange: formik.handleChange,\n        value: formik.values.name,\n        error: formik.errors.name\n      }), /*#__PURE__*/_jsx(Form.Input, {\n        name: \"adress\",\n        type: \"text\",\n        label: \"Direccion\",\n        placeholder: \"Direccion\",\n        onChange: formik.handleChange,\n        value: formik.values.adress,\n        error: formik.errors.adress\n      })]\n    }), /*#__PURE__*/_jsxs(Form.Group, {\n      widths: \"equal\",\n      children: [/*#__PURE__*/_jsx(Form.Input, {\n        name: \"city\",\n        type: \"text\",\n        label: \"Ciudad\",\n        placeholder: \"Ciudad\",\n        onChange: formik.handleChange,\n        value: formik.values.city,\n        error: formik.errors.city\n      }), /*#__PURE__*/_jsx(Form.Input, {\n        name: \"state\",\n        type: \"text\",\n        label: \"Estado/Provincia/Region\",\n        placeholder: \"Estado/Provincia/Region\",\n        onChange: formik.handleChange,\n        value: formik.values.state,\n        error: formik.errors.state\n      })]\n    }), /*#__PURE__*/_jsxs(Form.Group, {\n      widths: \"equal\",\n      children: [/*#__PURE__*/_jsx(Form.Input, {\n        name: \"postalCode\",\n        type: \"text\",\n        label: \"C\\xF3digo postal\",\n        placeholder: \"C\\xF3digo postal\",\n        onChange: formik.handleChange,\n        value: formik.values.postalCode,\n        error: formik.errors.postalCode\n      }), /*#__PURE__*/_jsx(Form.Input, {\n        name: \"phone\",\n        type: \"text\",\n        label: \"Numero de telefono\",\n        placeholder: \"Numero de telefono\",\n        onChange: formik.handleChange,\n        value: formik.values.phone,\n        error: formik.errors.phone\n      })]\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: \"actions\",\n      children: /*#__PURE__*/_jsx(Button, {\n        className: \"submit\",\n        type: \"submit\",\n        loading: loading,\n        disabled: loading,\n        children: newAdress ? \"Crear direccion\" : \"Actualizar Direccion\"\n      })\n    })]\n  });\n}\n\nfunction initialValues(adress) {\n  return {\n    title: (adress === null || adress === void 0 ? void 0 : adress.title) || \"\",\n    name: (adress === null || adress === void 0 ? void 0 : adress.name) || \"\",\n    adress: (adress === null || adress === void 0 ? void 0 : adress.adress) || \"\",\n    city: (adress === null || adress === void 0 ? void 0 : adress.city) || \"\",\n    state: (adress === null || adress === void 0 ? void 0 : adress.state) || \"\",\n    postalCode: (adress === null || adress === void 0 ? void 0 : adress.postalCode) || \"\",\n    phone: (adress === null || adress === void 0 ? void 0 : adress.postalCode) || \"\"\n  };\n}\n\n;\n\nfunction validationSchema() {\n  return {\n    title: Yup.string().required(true),\n    name: Yup.string().required(true),\n    adress: Yup.string().required(true),\n    city: Yup.string().required(true),\n    state: Yup.string().required(true),\n    postalCode: Yup.string().required(true),\n    phone: Yup.string().required(true)\n  };\n}\n\n;","map":null,"metadata":{},"sourceType":"module"}