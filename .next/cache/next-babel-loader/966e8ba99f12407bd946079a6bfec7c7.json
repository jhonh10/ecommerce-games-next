{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { Button } from 'semantic-ui-react';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { toast } from 'react-toastify';\nimport { size } from 'lodash';\nimport useAuth from '../../../../hooks/useAuth';\nimport useCart from '../../../../hooks/useCart';\nimport { paymentCardApi } from '../../../../api/cart';\nexport default function FormPayment({\n  adress,\n  products\n}) {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const stripe = useStripe();\n  const elements = useElements();\n  const {\n    auth,\n    logout\n  } = useAuth();\n  const {\n    removeAllProductsCart\n  } = useCart();\n  const router = useRouter();\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    if (!stripe || !elements) return;\n    const cardElement = elements.getElement(CardElement);\n    const result = await stripe.createToken(cardElement);\n\n    if (result.error) {\n      toast.error(result.error.message);\n    } else {\n      const response = await paymentCardApi(result.token, products, auth.idUser, adress, logout);\n\n      if (size(response) > 0) {\n        toast.success(\"Pedido realizado correctamente\");\n        removeAllProductsCart();\n        router.push(\"/orders\");\n      } else {\n        toast.error(\"Error al realizar el pedido\");\n      }\n    }\n\n    setLoading(false);\n  };\n\n  return /*#__PURE__*/_jsxs(\"form\", {\n    className: \"form-payment\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsx(CardElement, {}), /*#__PURE__*/_jsx(Button, {\n      type: \"submit\",\n      loading: loading,\n      disabled: !stripe,\n      children: \"Pagar\"\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}