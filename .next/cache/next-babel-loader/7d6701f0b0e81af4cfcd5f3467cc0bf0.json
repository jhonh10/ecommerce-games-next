{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Jessica Palacios\\\\Desktop\\\\ecomemrce-next\\\\client\\\\components\\\\Auth\\\\LoginForm\\\\LoginForm.js\";\nimport { useState } from 'react';\nimport { Form, Button } from 'semantic-ui-react';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { toast } from 'react-toastify';\nimport useAuth from '../../../hooks/useAuth';\nimport { loginApi } from '../../../api/user';\nexport default function LoginForm({\n  showRegisterForm,\n  onCloseModal\n}) {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    login\n  } = useAuth();\n  const formik = useFormik({\n    initialValues: initialValues(),\n    validationSchema: Yup.object(validationSchema()),\n    onSubmit: async formData => {\n      setLoading(true);\n      const response = await loginApi(formData);\n\n      if (response === null || response === void 0 ? void 0 : response.jwt) {\n        await login(response.jwt);\n        onCloseModal();\n      } else {\n        toast.error(\"Email o contraseña incorrecto\");\n      }\n\n      setLoading(false);\n    }\n  });\n\n  const resetPassword = () => {\n    formik.setErrors({});\n    const validateEmail = Yup.string().email().required();\n\n    if (!validateEmail.isValidSync(formik.values.identifier)) {\n      formik.setErrors({\n        identifier: true\n      });\n    } else {\n      console.log(formik.values.identifier);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    className: \"login-form\",\n    onSubmit: formik.handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n      name: \"identifier\",\n      type: \"text\",\n      placeholder: \"Correo Electronico\",\n      onChange: formik.handleChange,\n      error: formik.errors.identifier\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n      name: \"password\",\n      type: \"password\",\n      placeholder: \"Contrase\\xF1a\",\n      onChange: formik.handleChange,\n      error: formik.errors.password\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"actions\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        type: \"button\",\n        basic: true,\n        onClick: showRegisterForm,\n        children: \"Registrarse\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          className: \"submit\",\n          type: \"submit\",\n          loading: loading,\n          disabled: loading,\n          children: \"Iniciar Sesi\\xF3n\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"button\",\n          onClick: resetPassword,\n          children: \"\\xBFHas olvidado la contrase\\xF1a?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n\nfunction initialValues() {\n  return {\n    identifier: \"\",\n    password: \"\"\n  };\n}\n\nfunction validationSchema() {\n  return {\n    identifier: Yup.string().email(true).required(true),\n    password: Yup.string().required(true)\n  };\n}","map":{"version":3,"sources":["C:/Users/Jessica Palacios/Desktop/ecomemrce-next/client/components/Auth/LoginForm/LoginForm.js"],"names":["useState","Form","Button","useFormik","Yup","toast","useAuth","loginApi","LoginForm","showRegisterForm","onCloseModal","loading","setLoading","login","formik","initialValues","validationSchema","object","onSubmit","formData","response","jwt","error","resetPassword","setErrors","validateEmail","string","email","required","isValidSync","values","identifier","console","log","handleSubmit","handleChange","errors","password"],"mappings":"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","sourcesContent":["import { useState } from 'react';\r\nimport { Form, Button } from 'semantic-ui-react';\r\nimport { useFormik } from 'formik'\r\nimport * as Yup from 'yup';\r\nimport { toast } from 'react-toastify';\r\nimport useAuth from '../../../hooks/useAuth';\r\nimport { loginApi } from '../../../api/user';\r\n\r\n\r\nexport default function LoginForm({ showRegisterForm, onCloseModal }) {\r\n    const [loading, setLoading] = useState(false);\r\n    const { login } = useAuth();\r\n\r\n    const formik = useFormik({\r\n        initialValues: initialValues(),\r\n        validationSchema: Yup.object(validationSchema()),\r\n        onSubmit: async (formData) => {\r\n            setLoading(true)\r\n            const response = await loginApi(formData);\r\n            if (response?.jwt) {\r\n                await login(response.jwt);\r\n                onCloseModal();\r\n            } else {\r\n                toast.error(\"Email o contraseña incorrecto\")\r\n            }\r\n            setLoading(false)\r\n        },\r\n    })\r\n\r\n    const resetPassword = () => {\r\n        formik.setErrors({});\r\n        const validateEmail = Yup.string().email().required();\r\n\r\n        if(!validateEmail.isValidSync(formik.values.identifier)){\r\n           formik.setErrors({ identifier: true});\r\n        }else{\r\n            console.log(formik.values.identifier)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Form className=\"login-form\" onSubmit={formik.handleSubmit}>\r\n            <Form.Input name=\"identifier\"\r\n                type=\"text\"\r\n                placeholder=\"Correo Electronico\"\r\n                onChange={formik.handleChange}\r\n                error={formik.errors.identifier}\r\n            />\r\n            <Form.Input name=\"password\"\r\n                type=\"password\"\r\n                placeholder=\"Contraseña\"\r\n                onChange={formik.handleChange}\r\n                error={formik.errors.password}\r\n            />\r\n            <div className=\"actions\">\r\n                <Button type=\"button\" basic onClick={showRegisterForm}>Registrarse</Button>\r\n                <div>\r\n                    <Button className=\"submit\" type=\"submit\" loading={loading} disabled={loading}>Iniciar Sesión</Button>\r\n                    <Button type=\"button\" onClick={resetPassword}>¿Has olvidado la contraseña?</Button>\r\n                </div>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nfunction initialValues() {\r\n    return {\r\n        identifier: \"\",\r\n        password: \"\"\r\n    }\r\n}\r\n\r\nfunction validationSchema() {\r\n    return {\r\n        identifier: Yup.string().email(true).required(true),\r\n        password: Yup.string().required(true)\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}