{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Jessica Palacios/Desktop/Proyectos React/ecomemrce-next/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/Jessica Palacios/Desktop/Proyectos React/ecomemrce-next/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { Button } from 'semantic-ui-react';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { toast } from 'react-toastify';\nimport { size } from 'lodash';\nimport useAuth from '../../../../hooks/useAuth';\nimport useCart from '../../../../hooks/useCart';\nimport { paymentCardApi } from '../../../../api/cart';\nexport default function FormPayment(_ref) {\n  var adress = _ref.adress,\n      products = _ref.products;\n\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var stripe = useStripe();\n  var elements = useElements();\n\n  var _useAuth = useAuth(),\n      auth = _useAuth.auth,\n      logout = _useAuth.logout;\n\n  var _useCart = useCart(),\n      removeAllProductsCart = _useCart.removeAllProductsCart;\n\n  var router = useRouter();\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var cardElement, result, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              setLoading(true);\n\n              if (!(!stripe || !elements)) {\n                _context.next = 4;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 4:\n              cardElement = elements.getElement(CardElement);\n              _context.next = 7;\n              return stripe.createToken(cardElement);\n\n            case 7:\n              result = _context.sent;\n\n              if (!result.error) {\n                _context.next = 12;\n                break;\n              }\n\n              toast.error(result.error.message);\n              _context.next = 16;\n              break;\n\n            case 12:\n              _context.next = 14;\n              return paymentCardApi(result.token, products, auth.idUser, adress, logout);\n\n            case 14:\n              response = _context.sent;\n\n              if (size(response) > 0) {\n                toast.success(\"Pedido realizado correctamente\");\n                removeAllProductsCart();\n                router.push(\"/orders\");\n              } else {\n                toast.error(\"Error al realizar el pedido\");\n              }\n\n            case 16:\n              setLoading(false);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxs(\"form\", {\n    className: \"form-payment\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsx(CardElement, {}), /*#__PURE__*/_jsx(Button, {\n      type: \"submit\",\n      loading: loading,\n      disabled: !stripe,\n      children: \"Pagar\"\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}